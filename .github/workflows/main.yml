name: CI/CD

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ main, master ]

permissions:
  contents: write  # necessário para criar Release e enviar artefatos

jobs:
  # ---------- Python CI ----------
  python-ci:
    if: >
      hashFiles('requirements.txt') != '' ||
      hashFiles('pyproject.toml') != '' ||
      hashFiles('setup.cfg') != '' ||
      hashFiles('setup.py') != ''
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install deps (requirements.txt se existir)
        run: |
          if [ -f requirements.txt ]; then
            python -m pip install --upgrade pip
            pip install -r requirements.txt
          elif [ -f pyproject.toml ]; then
            python -m pip install --upgrade pip build
            # instala dependências de desenvolvimento se definido (pep 621 + hatch/poetry/pdm podem variar)
            # ajuste conforme seu gerenciador de pacotes
          else
            python -m pip install --upgrade pip
            pip install pytest flake8
          fi

      - name: Lint (flake8, se disponível)
        run: |
          if python -c "import flake8" 2>/dev/null; then
            flake8 .
          else
            echo "flake8 não encontrado; pulando lint."
          fi

      - name: Testes (pytest, se existir)
        run: |
          if ls -1 **/test_*.py tests/*_test.py 2>/dev/null | head -n 1; then
            pytest -q
          else
            echo "Nenhum teste encontrado; pulando pytest."
          fi

      - name: Build artefato (wheel/sdist ou zip)
        run: |
          set -e
          if [ -f pyproject.toml ] || [ -f setup.py ] || [ -f setup.cfg ]; then
            python -m pip install build
            python -m build
            mkdir -p artifact && cp -r dist/* artifact/
          else
            mkdir -p artifact
            zip -r artifact/project.zip . -x ".git/*" ".github/*"
          fi

      - name: Upload artefato (Python)
        uses: actions/upload-artifact@v4
        with:
          name: build-python
          path: artifact/

  # ---------- Node.js CI ----------
  node-ci:
    if: hashFiles('package.json') != ''
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install
        run: npm ci || npm install

      - name: Lint (se script existir)
        run: npm run lint --if-present

      - name: Testes (se script existir)
        run: npm test --if-present

      - name: Build (se script existir)
        run: npm run build --if-present

      - name: Preparar artefato
        run: |
          mkdir -p artifact
          if [ -d dist ]; then
            cp -r dist/* artifact/
          else
            zip -r artifact/project.zip . -x ".git/*" ".github/*" "node_modules/*"
          fi

      - name: Upload artefato (Node)
        uses: actions/upload-artifact@v4
        with:
          name: build-node
          path: artifact/

  # ---------- Release (CD simplificado) ----------
  release:
    needs: [python-ci, node-ci]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Baixar artefatos dos jobs
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
      - name: Criar Release e anexar artefatos
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
